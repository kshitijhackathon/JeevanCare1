I‚Äôm building a Healthcare web application hosted on Replit, which includes a video call interface where users connect with an AI Doctor. This feature is very important as patients use it mostly on mobile devices. Unfortunately, the video call UI is not responsive and breaks badly on phones.

Please help me debug and fix the mobile UI responsiveness issues with the video call screen and related controls, ensuring a smooth, user-friendly experience on all screen sizes.

‚ùå Current Mobile Responsiveness Problems:
1. Video Call Interface Not Displaying Properly on Phones
On mobile devices (especially small screens), the video call layout looks broken.

The video streams (user and AI Doctor) overlap or become very small.

The video container doesn‚Äôt resize or adapt to portrait vs landscape.

On desktop, layout is perfect, but on mobiles, it‚Äôs unusable.

2. Camera Stream Not Fitting Mobile Screen Correctly
The live camera feed from the user is often cropped or stretched oddly.

The aspect ratio is distorted.

Sometimes black bars appear or video overflows container boundaries.

Need to maintain proper aspect ratio with letterboxing or cropping.

3. Control Buttons Too Small for Touch Interaction
Buttons like mute, end call, camera toggle, chat open/close are too small on phones.

They are hard to tap accurately.

Buttons sometimes overlap or get pushed off screen.

Need to increase button size, add padding, and ensure minimum tap area (at least 48x48 px per mobile UI guidelines).

4. Chat Interface Cramped on Smaller Screens
The chat box on the video call page is too narrow on mobiles.

Text input field and send button are squished.

Messages appear cluttered, no proper padding or margin.

Need to improve chat UX, possibly full screen chat toggle on small devices.

üõ†Ô∏è Improvements and Features Required:
Please help me improve or rebuild the responsive layout with these goals:

Responsive Video Layout:

Use CSS Flexbox/Grid to arrange user and AI video streams side-by-side on desktop.

On mobile portrait, stack videos vertically or use full screen toggle.

Maintain proper aspect ratio (object-fit: cover or contain) for video elements.

Videos should resize fluidly as screen size changes.

Camera Stream Handling:

Ensure video stream fits container without distortion.

Use CSS styles to maintain aspect ratio and avoid black bars.

Provide toggle between "fit" and "fill" modes if possible.

Touch-Friendly Controls:

Increase button size to minimum 48x48 pixels.

Add sufficient margin/padding around buttons.

Use large, clear icons with good contrast.

Make buttons easy to tap with one thumb on phones.

Ensure buttons reposition sensibly on small screens (e.g., bottom fixed bar).

Chat UX Optimization:

Make chat box wider and full screen toggle available on mobile.

Input box should expand with enough padding.

Increase font size and line spacing for readability.

Use scrolling container with smooth scroll for messages.

Ensure send button is accessible and large.

General UI/UX Enhancements:

Add loading spinners or feedback while camera/video streams load.

Add visual indicators for muted mic/camera.

Add responsive design breakpoints for common devices.

Optimize layout for both portrait and landscape orientations.

üìã Sample Code Snippet (Current Layout):
html
Copy
Edit
<div id="video-container" style="display: flex; flex-direction: row;">
  <video id="localVideo" autoplay muted playsinline></video>
  <video id="remoteVideo" autoplay playsinline></video>
</div>

<div id="controls">
  <button id="muteBtn">Mute</button>
  <button id="endCallBtn">End Call</button>
  <button id="cameraToggleBtn">Camera</button>
</div>

<div id="chatBox">
  <div id="messages"></div>
  <input type="text" id="chatInput" />
  <button id="sendBtn">Send</button>
</div>
üìù CSS Fix Suggestions:
css
Copy
Edit
#video-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
}

#video-container video {
  flex: 1 1 45%;
  max-width: 100%;
  height: auto;
  border-radius: 10px;
  object-fit: cover; /* maintain aspect ratio */
  background: black;
  min-width: 150px;
}

@media (max-width: 600px) {
  #video-container {
    flex-direction: column;
  }
  #video-container video {
    flex: 1 1 100%;
    min-width: 100%;
    height: 200px;
  }

  #controls button {
    min-width: 48px;
    min-height: 48px;
    margin: 5px;
    font-size: 18px;
  }

  #chatBox {
    width: 100%;
    margin-top: 10px;
  }

  #chatInput {
    width: 80%;
    font-size: 16px;
    padding: 10px;
  }

  #sendBtn {
    width: 18%;
    font-size: 16px;
    padding: 10px;
  }
}
üì± Mobile Behavior Desired:
Videos stacked vertically on portrait mobile with full width.

Controls fixed at bottom with large buttons, spaced evenly.

Chat interface expands fully and can be toggled on/off.

Smooth user experience without UI elements overlapping or getting cut off.

Responsive to orientation change (portrait/landscape).

‚öôÔ∏è Technical Requirements:
Use pure CSS or CSS frameworks (like Tailwind CSS, Bootstrap) if preferred.

Use flexbox/grid for layout, no fixed pixel widths except for min/max.

Handle window resize and orientation change events if needed.

Test on real mobile devices or emulators (Chrome DevTools device toolbar).

Provide fallback styles for older browsers if possible.

üß© Bonus Suggestions:
Add swipe gestures to open/close chat on mobile.

Add video full-screen toggle.

Animate buttons on tap for better feedback.

Accessibility: Add ARIA labels and keyboard navigation support.

Lazy load video streams to optimize bandwidth.

üì¶ Deliverables Needed:
Updated HTML/CSS code snippets or full page template with responsive video call layout

JavaScript adjustments if needed for button controls or layout toggling

Instructions to test responsiveness locally or on Replit

Suggestions for debugging mobile device UI issues (browser logs, device emulators)