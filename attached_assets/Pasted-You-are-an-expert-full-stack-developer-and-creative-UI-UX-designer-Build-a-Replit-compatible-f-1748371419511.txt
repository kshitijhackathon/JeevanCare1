You are an expert full-stack developer and creative UI/UX designer.

Build a **Replit-compatible full-stack app** with the following requirements:

---

### üß± Tech Stack

- **Frontend**: React.js + TypeScript + Tailwind CSS + Shadcn UI + Framer Motion + React Router DOM  
- **3D Globe**: Three.js + React-Three-Fiber + Drei + GeoJSON/topoJSON for India's states  
- **Backend**: Flask (Python) + SQLite (or PostgreSQL) with CORS enabled  
- **Deployment**: Must run seamlessly on Replit (no external server setup)

---

### ‚öôÔ∏è Feature Requirements

#### ‚úÖ 1. Add ‚ÄúHeatmap‚Äù Button in Footer

- In the existing footer that includes 3 buttons: Home, Reports, Notifications ‚Äî **add a 4th button: "Heatmap"**
- The new button should:
  - Use the **Globe icon** from `lucide-react`
  - Be styled consistently with existing buttons using Tailwind + Shadcn UI
  - Navigate to a new route: `/heatmap`

---

#### üåç 2. Heatmap Page: Interactive 3D Globe of India

- On clicking the "Heatmap" button, open a **dedicated full-screen heatmap page**
- Implement an **interactive 3D globe centered on India**, using:
  - **Three.js** via **React-Three-Fiber**
  - **Drei** helpers for zoom/controls
  - **GeoJSON or TopoJSON** data to render India‚Äôs states/regions
  - Optional: Use high-res globe texture for realistic appearance
- The globe must be:
  - **Zoomable, rotatable**
  - **Clickable** on individual Indian regions (states or cities)
  - Regions should glow or highlight on hover

---

#### üìä 3. Region-Wise Scam Data Visualization

- On selecting a region within India:
  - Show:
    - **Number of scam cases**
    - **Breakdown by scam types**: Phishing, QR Scam, Voice Scam, Fake Apps, SIM Swap, etc.
    - Optional: **Total monetary loss estimate**
- Color-code regions on the globe using a **scam density heatmap gradient** (green ‚Üí red)

---

#### üîÑ 4. Backend Endpoint: `/scam-data`

- Create a Flask backend with an endpoint:
  - `GET /scam-data`  
  - Returns JSON data like:
    ```json
    {
      "Delhi": {
        "total_cases": 532,
        "types": {
          "Phishing": 150,
          "QR Scam": 120,
          "Voice Scam": 100,
          "SIM Swap": 162
        }
      },
      ...
    }
    ```
- The endpoint must serve this data to the frontend for dynamic rendering

---

#### üß≠ 5. Sidebar or Modal on Selection

- When a region is clicked:
  - Show a sidebar/modal with the stats from the backend
  - Include nice transitions, responsive design, and animated charts if possible
  - Allow closing or switching between regions

---

#### üß™ 6. Additional Features (Optional but Impressive)

- Live updates when new scam cases are reported (simulated or actual)
- Animation for scam case spread over time (time slider)
- Export/share button for region-specific stats
- Integrate voice alerts or summary (text-to-speech)

---

### ‚úÖ Deliverables

- `Footer.tsx`: Add Heatmap button
- `HeatmapPage.tsx`: Contains 3D globe and region-wise logic
- `main.py`: Flask backend with `/scam-data` endpoint
- `App.tsx`: Proper routing to include `/heatmap`
- Use modular components, clean UI, animations, and be Replit-ready

---

Make the entire project well-commented and understandable. Optimize for mobile and low-end devices on Replit. 
